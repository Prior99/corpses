var TelnetClient = require("./7dtd.js");
var WS = require("ws");
var WebSocket = require("./websocket_server.js");
var config = require("../config.json");
var FS = require("fs");
var Database = require("./database.js");
var addClientListeners = require("./client.js");

var clients = [];
var wsServer;
var telnetClient;
var database;

startDatabase();
startWebsocketServer();
startTelnetClient();
symlinkMap();

function startDatabase() {
	database = new Database();
}

function symlinkMap() {
	FS.symlink(config.mapDirectory, config.clientDirectory + "/map", function(err) {
		if(err) {
			console.error("Unable to create symlink for map.\nPlease create it manually by executing the following command:\n\nln -s " + config.mapDirectory + " " + config.clientDirectory + "/map");
		}
		else {
			console.log("Map successfully linked. (" + config.mapDirectory + " -> " + config.clientDirectory + "/map");
		}
	});
}

function startWebsocketServer() {
	console.log("Starting Websocketserver...");
	var portfile = "/*\n * This is an generated file.\n * Do not edit this file!\n * It will be overwritten on every start of the server.\n */\n\nvar _port = " + config.websocketPort + ";\n";
	FS.writeFile(config.clientDirectory + "/port.js", portfile, function(err) {
		if(err) {
			console.error("Unable to create file \"" + config.clientDirectory + "/port.js\". Please create it manually with the following content:\n" + portfile + "\n");
		}
		else {
			wsServer = new WS.Server({
				host : "0.0.0.0",
				port : config.websocketPort
			}).on("connection", function(ws) {
				(function(client) {
					clients.push(client);
					console.log("New client connected. Currently " + clients.length + " clients connected.");
					addClientListeners(client, database);
					client.addCloseListener(function() {
						removeClient(client);
					});
				})(new WebSocket(ws));
			});
			console.log("Websocketserver Started up!");
		}
	});
}

function broadcastRemoveMarker(id) {
	for(var i in clients) {
		clients[i].send("removeMarker", id);
	}
}

function broadcastMarkers(markers) {
	for(var i in clients) {
		sendMarkers(clients[i], markers);
	}
}

function sendMarkers(client, markers) {
	client.send("markers", markers);
}

function removeClient(client) {
	clients.splice(clients.indexOf(client), 1);
	console.log("Client disconnected. Currently " + clients.length + " clients connected.");
}

function broadcast(type, data) {
	//console.log("Broadcastign event: " + type);
	for(var key in clients) {
		var client = clients[key];
		try {
			client.send(type, data);
		}
		catch(e) {
			removeClient(client);
		}
	}
}

function startTelnetClient() {
	console.log("Starting Telnetclient...");
	telnetClient = new TelnetClient();
	telnetClient.on("info", function(evt) {
		broadcast("info", evt);
	});
	telnetClient.on("spawningWanderingHorde", function(evt) {
		broadcast("spawningWanderingHorde", evt);
	});
	telnetClient.on("listKnownPlayers", function(evt) {
		broadcast("listKnownPlayers", evt);
	});
	telnetClient.on("getTime", function(evt) {
		broadcast("getTime", evt);
	});
	telnetClient.on("listPlayersExtended", function(evt) {
		broadcast("listPlayersExtended", evt);
	});
	telnetClient.on("playerConnected", function(evt) {
		broadcast("playerConnected", evt);
	});
	telnetClient.on("playerDisconnected", function(evt) {
		broadcast("playerDisconnected", evt);
	});
	telnetClient.on("close", function() {
		console.log("Connection to 7DTD closed. Restarting it!");
		startTelnetClient();
	});
	telnetClient.on("open", function() {
		console.log("Connection to 7DTD established.");
		telnetClient.triggerListKnownPlayers();
	});
	setInterval(function() {
		telnetClient.triggerGetTime();
	}, 7000);
	setInterval(function() {
		telnetClient.triggerListKnownPlayers();
	}, 10000);
	setInterval(function() {
		telnetClient.triggerListPlayersExtended();
	}, 5000);
}
